headers = {
    'Cache-Control': 'no-cache',  # Instructs the browser and server not to cache
    'Pragma': 'no-cache'          # HTTP/1.0 compatibility; often used with Cache-Control
}
-------------------------------------------------------------------------------------
Ans 11: To make only the layers in the last block of your pretrained model trainable, you can iterate through the layers in the model and set the trainable attribute to False for all layers except those in the last block. Hereâ€™s how you can implement this in code:

# Assuming model is a list of layers as described
class Layer:
    def _init_(self, name):
        self.name = name
        self.trainable = True  # Default is trainable

# Example model definition
model = [
    Layer('Conv2D_block_1'), Layer('Conv2D_block_1'), Layer('MaxPooling_block_1'),
    Layer('Conv2D_block_2'), Layer('Conv2D_block_2'), Layer('MaxPooling_block_2'),
    Layer('Conv2D_block_3'), Layer('Conv2D_block_3'), Layer('MaxPooling_block_3'),
    Layer('Conv2D_block_4'), Layer('Conv2D_block_4'), Layer('MaxPooling_block_4'),
    Layer('Conv2D_block_5'), Layer('Conv2D_block_5'), Layer('MaxPooling_block_5'),
    Layer('Conv2D_block_6'), Layer('Conv2D_block_6'), Layer('MaxPooling_block_6')
]

# Determine the layers in the last block
last_block_start_index = len(model) - 6  # Assuming each block has 3 layers (Conv2D, Conv2D, MaxPooling)
last_block_layers = model[last_block_start_index:]

# Set all layers in the model to non-trainable
for layer in model:
    layer.trainable = False

# Set only the layers in the last block to trainable
for layer in last_block_layers:
    layer.trainable = True

# Output the trainable status of each layer for verification
for layer in model:
    print(f'Layer: {layer.name}, Trainable: {layer.trainable}')
--------------------------------------------------------------------------------------------------------------------
Explanation:

	1.	Layer Class: A simple class to represent layers with a name and a trainable attribute.
	2.	Model Definition: A list of layers representing the structure of the pretrained model.
	3.	Last Block Identification: The code identifies the last block by slicing the model list.
	4.	Trainability Setting: It first sets all layers to trainable = False, and then sets the layers in the last block to trainable = True.
	5.	Verification: The code prints the trainable status of each layer for confirmation.

This code will ensure that only the layers in the last block of your model are trainable.
