headers = {
    'Cache-Control': 'no-cache',  # Instructs the browser and server not to cache
    'Pragma': 'no-cache'          # HTTP/1.0 compatibility; often used with Cache-Control
}
.
.
.
.
.
.
Ans3: 

Here’s the code to create the model using Keras’s Functional API. This model includes:

	1.	A Rescaling layer to normalize pixel values to the range ￼.
	2.	The pretrained ResNet50 model, which has only the convolutional portion with an average pooling layer as the last layer.
	3.	A classifier with one hidden layer (64 neurons with sigmoid activation) and an output layer with 10 neurons with softmax activation (suitable for classification).

from tensorflow.keras.layers import Input, Rescaling, Dense, Flatten
from tensorflow.keras.models import Model
from tensorflow.keras.applications import ResNet50

# Input layer
input_layer = Input(shape=(32, 32, 3))

# Rescaling layer to ensure pixel values are in the range [0, 1]
x = Rescaling(scale=1.0 / 255)(input_layer)

# Load the pretrained ResNet50 model (only the convolution portion, excluding the top classifier layers)
# We set include_top=False to exclude the fully connected layers
# Set pooling to 'avg' to add a global average pooling layer at the end of the ResNet model
pretrained_model = ResNet50(include_top=False, pooling='avg', input_shape=(32, 32, 3))
x = pretrained_model(x)

# Flattening layer is not needed as pooling='avg' outputs a 1D tensor

# Classifier portion
x = Dense(64, activation='sigmoid')(x)
output_layer = Dense(10, activation='softmax')(x)

# Create the final model
model = Model(inputs=input_layer, outputs=output_layer)

This code constructs a Keras model using the ResNet50 pretrained convolutional base and builds a classifier on top with one hidden layer (64 neurons with sigmoid activation) and a 10-neuron output layer with softmax activation, suitable for multi-class classification. The Rescaling layer ensures that pixel values are normalized.
